select * from customer;
select * from invoice;
select * from invoice_line;

select * from genre;
select * from track;
select * from artist;

select * from album;

/* Q1: Who is the senior most employee based on job title? */

select * from employee
order by levels desc
limit 1;

/* Q2: Which countries have the most Invoices? */

select count(*) as c, billing_country
from invoice
group by billing_country
order by c desc;

/* Q3: What are top 3 values of total invoice? */

select total from invoice
order by total desc
limit 3;

/* Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
Write a query that returns one city that has the highest sum of invoice totals. 
Return both the city name & sum of all invoice totals */
select sum(total) as total, billing_city
from invoice
group by billing_city
order by total desc
limit 1;

/* Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer. 
Write a query that returns the person who has spent the most money.*/
select customer.customer_id,
first_name, 
last_name,
sum(total) as total
from customer
JOIN invoice ON customer.customer_id = invoice.customer_id
group by customer.customer_id
order by total desc
limit 1;

* Question Set 2 - Moderate dd

--Q1: Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
Return your list ordered alphabetically by email starting with A.

SELECT DISTINCT email,first_name, last_name
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoice_line ON invoice.invoice_id = invoice_line.invoice_id
WHERE track_id IN(
	SELECT track_id FROM track
	JOIN genre ON track.genre_id = genre.genre_id
	WHERE genre.name LIKE 'Rock'
)
ORDER BY email;

-- Q2: Let's invite the artists who have written the most rock music in our dataset. 
Write a query that returns the Artist name and total track count of the top 10 rock bands. */


select artist.artist_id, artist.name, count(track.track_id) as number_of_song
from artist 
join album on artist.artist_id = album.artist_id
join track on album.album_id = track.album_id
join genre on track.genre_id = genre.genre_id
WHERE genre.name LIKE 'Rock'
GROUP BY artist.artist_id
ORDER  BY number_of_song DESC
LIMIT 10;


--Q3: Return all the track names that have a song length longer than the average song length. 
--Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first.

-- track name = track, 

select name, milliseconds
from track
where milliseconds>(
select avg(milliseconds) as avg_track_length from track)
order by milliseconds;
